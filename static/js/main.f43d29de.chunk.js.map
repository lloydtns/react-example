{"version":3,"sources":["components/Titulos.js","components/Formulario.js","components/Weather.js","App.js","constants/constants.js","serviceWorker.js","index.js"],"names":["Titulos","react_default","a","createElement","className","Formulario","props","onSubmit","obtenerTiempo","type","name","id","placeholder","Weather","propPeticionExitosa","propCiudad","propPais","propDescripcion","propTemperatura","propHumedad","App","_useState","useState","_useState2","Object","slicedToArray","temperatura","setTemperatura","_useState3","_useState4","humedad","setHumedad","_useState5","_useState6","ciudad","setCiudad","_useState7","_useState8","pais","setPais","_useState9","_useState10","descripcion","setDescripcion","_useState11","_useState12","peticionExitosa","setPeticionExitosa","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","inputCiudad","inputPais","url","wrap","_context","prev","next","preventDefault","target","value","concat","console","log","Axios","get","then","res","data","parseFloat","main","temp","toFixed","sys","country","humidity","weather","description","catch","err","error","stop","_x","apply","this","arguments","components_Titulos","components_Formulario","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QASeA,SAPC,kBACZC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,+ECWSC,EAdI,SAAAC,GAAK,OACtBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,eACpBP,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,SAASC,GAAG,SAASC,YAAY,cAEzDX,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,YAAY,eACrDX,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAb,mBCqCOI,EA7CC,SAAAP,GACd,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAGXE,EAAMQ,oBACFb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,kCAEEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMS,WAAxC,KAAsDT,EAAMU,SAA5D,MAEFf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,mBAAyCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMW,kBACjFhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBAAyCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMY,gBAAxC,WACzCjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YAAqCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMa,YAAxC,OAEvC,GAINlB,EAAAC,EAAAC,cAAA,gBACKG,EAAMQ,qBAAuBR,EAAMS,YAAcT,EAAMU,UACtDf,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,kCAEEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMS,WAAxC,KAAsDT,EAAMU,SAA5D,MAIJV,EAAMQ,qBAAuBR,EAAMW,iBAAoBhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,mBACxCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMW,kBAGvDX,EAAMQ,qBAAuBR,EAAMY,iBAAmBjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBACvCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMY,gBAAxC,WAGfZ,EAAMQ,qBAAuBR,EAAMa,aAAelB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACvCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBE,EAAMa,YAAxC,SCgDNC,EA9EH,WAAM,IAAAC,EAEsBC,mBAAS,MAF/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEII,EAFJJ,EAAA,GAAAK,EAGcN,mBAAS,MAHvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGTE,EAHSD,EAAA,GAGAE,EAHAF,EAAA,GAAAG,EAIYV,mBAAS,MAJrBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAITE,EAJSD,EAAA,GAIDE,EAJCF,EAAA,GAAAG,EAKQd,mBAAS,MALjBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKTE,EALSD,EAAA,GAKHE,EALGF,EAAA,GAAAG,EAMsBlB,mBAAS,MAN/BmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAMTE,EANSD,EAAA,GAMIE,EANJF,EAAA,GAAAG,EAO8BtB,oBAAS,GAPvCuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAOTE,EAPSD,EAAA,GAOQE,EAPRF,EAAA,GASVG,EAAU,eAAAC,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,EAAAjD,EAAAkD,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAjD,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACjBP,EAAEQ,iBACEP,EAAcD,EAAES,OAAO7B,OAAO8B,MAC9BR,EAAYF,EAAES,OAAOzB,KAAK0B,MAEV,KAAhBT,GAAoC,KAAdC,EALT,CAAAG,EAAAE,KAAA,gBAMTJ,EANS,qDAAAQ,OAMkDV,EANlD,KAAAU,OAMiET,EANjE,WAAAS,OChBU,oCDuBzBC,QAAQC,IAAIV,GAPGE,EAAAE,KAAA,EAQTO,IAAMC,IAAIZ,GACba,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAE,GACJN,QAAQC,IAAIK,GAGZ7C,EAAe8C,YAAYD,EAAKE,KAAKC,KAAO,QAAQC,QAAQ,KAC5DzC,EAAUqC,EAAK9D,MACf6B,EAAQiC,EAAKK,IAAIC,SACjB/C,EAAWyC,EAAKE,KAAKK,UACrBpC,EAAe6B,EAAKQ,QAAQ,GAAGC,aAC/BlC,GAAmB,KAEpBmC,MAAM,SAAAC,GACLjB,QAAQkB,MAAMD,GACdxD,EAAe,MACfQ,EAAU,MACVI,EAAQ,MACRR,EAAW,MACXY,EAAe,MACfI,GAAmB,KA5BR,OAAAY,EAAAE,KAAA,iBAgCfK,QAAQC,IAAI,wCACZxC,EAAe,MACfQ,EAAU,MACVI,EAAQ,MACRR,EAAW,MACXY,EAAe,MACfI,GAAmB,GAtCJ,yBAAAY,EAAA0B,SAAAhC,MAAH,gBAAAiC,GAAA,OAAArC,EAAAsC,MAAAC,KAAAC,YAAA,GA0ChB,OAEExF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACuF,EAAD,OAEFzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACwF,EAAD,CAAYnF,cAAewC,IAC3B/C,EAAAC,EAAAC,cAACyF,EAAD,CACE1E,gBAAiBQ,EACjBX,WAAYmB,EACZlB,SAAUsB,EACVnB,YAAaW,EACbb,gBAAiByB,EACjB5B,oBAAqBgC,UEhEjB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOlG,EAAAC,EAAAC,cAACiG,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.f43d29de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titulos = () => (\r\n    <div>\r\n      <h1 className=\"title-container__title\">Weather Finder</h1>\r\n      <p className=\"title-container__subtitle\">Entérate de la temperatura, condiciones meteorológicas y más...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titulos;\r\n","import React from 'react'\r\n\r\nconst Formulario = props => (\r\n  <div>\r\n    <form onSubmit={props.obtenerTiempo}>\r\n      <div>\r\n        {/* <label htmlFor=\"ciudad\">Ciudad: </label> */}\r\n        <input type=\"text\" name=\"ciudad\" id=\"ciudad\" placeholder=\"Ciudad...\" />\r\n        {/* <label htmlFor=\"pais\">País: </label> */}\r\n        <input type=\"text\" name=\"pais\" id=\"pais\" placeholder=\"País...\" />\r\n        <button type=\"submit\">Buscar info</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\n\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"weather__info\">\r\n\r\n      {/* Utilizando Operador Condicional (ternario)  */}\r\n      { props.propPeticionExitosa\r\n          ? <div>\r\n              <h3 className=\"weather__key\">\r\n                Información del clima en&nbsp;\r\n                <span className=\"weather__value\">{props.propCiudad} ({props.propPais})</span>\r\n              </h3>\r\n              <p className=\"weather__key\">Descripción: <span className=\"weather__value\">{props.propDescripcion}</span></p>\r\n              <p className=\"weather__key\">Temperatura: <span className=\"weather__value\">{props.propTemperatura} ºC</span></p>\r\n              <p className=\"weather__key\">Humedad: <span className=\"weather__value\">{props.propHumedad}%</span></p>\r\n            </div>\r\n          : \"\"\r\n      }\r\n\r\n      {/* Utilizando && Operador de circuito corto/Evaluacion minima */}\r\n      <div> {/* Se puede escribir la sentencia en varias lineas usando los parentesis '(...)' */}\r\n        { !props.propPeticionExitosa && props.propCiudad && props.propPais && (\r\n            <h3 className=\"weather__key\">\r\n              Información del clima en&nbsp;\r\n              <span className=\"weather__value\">{props.propCiudad} ({props.propPais})</span>\r\n            </h3>\r\n          )\r\n        }\r\n        { props.propPeticionExitosa && props.propDescripcion && (<p className=\"weather__key\">\r\n            Descripción: <span className=\"weather__value\">{props.propDescripcion}</span>\r\n          </p>)\r\n        }\r\n        { props.propPeticionExitosa && props.propTemperatura && <p className=\"weather__key\">\r\n            Temperatura: <span className=\"weather__value\">{props.propTemperatura} ºC</span>\r\n          </p>\r\n        }\r\n        { props.propPeticionExitosa && props.propHumedad && <p className=\"weather__key\">\r\n            Humedad: <span className=\"weather__value\">{props.propHumedad}%</span>\r\n          </p>\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Weather\r\n","import React, { useState } from 'react';\nimport Axios from 'axios';\nimport './App.css';\nimport Titulos from './components/Titulos';\nimport Formluario from './components/Formulario';\nimport Weather from './components/Weather';\nimport { WEATHER_API_KEY } from './constants/constants';\n\nconst App = () => {\n\n  const [temperatura, setTemperatura] = useState(null);\n  const [humedad, setHumedad] = useState(null);\n  const [ciudad, setCiudad] = useState(null);\n  const [pais, setPais] = useState(null);\n  const [descripcion, setDescripcion] = useState(null);\n  const [peticionExitosa, setPeticionExitosa] = useState(false);\n\n  const getWeather = async (e) => {\n    e.preventDefault();\n    let inputCiudad = e.target.ciudad.value;\n    let inputPais = e.target.pais.value;\n\n    if (inputCiudad !== \"\" || inputPais !== \"\") {\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${inputCiudad},${inputPais}&appid=${WEATHER_API_KEY}`;\n      console.log(url)\n      await Axios.get(url)\n        .then(res => res.data)\n        .then(data => {\n          console.log(data);\n\n          // Castear String a Number usando Number(n). Se puede usar tambien 'parseInt(n)' y 'parseFloat(n)'\n          setTemperatura(parseFloat((data.main.temp - 273.15).toFixed(2))); // De grados Kelvin a Celsius\n          setCiudad(data.name);\n          setPais(data.sys.country);\n          setHumedad(data.main.humidity);\n          setDescripcion(data.weather[0].description);\n          setPeticionExitosa(true);\n        })\n        .catch(err => {\n          console.error(err);\n          setTemperatura(null);\n          setCiudad(null);\n          setPais(null);\n          setHumedad(null);\n          setDescripcion(null);\n          setPeticionExitosa(false);\n        });\n\n    } else {\n      console.log(\"Ciudad y Pais no pueden estar vacios\")\n      setTemperatura(null);\n      setCiudad(null);\n      setPais(null);\n      setHumedad(null);\n      setDescripcion(null);\n      setPeticionExitosa(false);\n    }\n  }\n\n  return (\n\n    <div className=\"wrapper\">\n      <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-5 title-container\">\n              <Titulos />\n            </div>\n            <div className=\"col-7 form-container\">\n              <Formluario obtenerTiempo={getWeather} />\n              <Weather\n                propTemperatura={temperatura}\n                propCiudad={ciudad}\n                propPais={pais}\n                propHumedad={humedad}\n                propDescripcion={descripcion}\n                propPeticionExitosa={peticionExitosa}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// CONSTANTES (La API Key tarda unos minutos en activarse en OpenWeather)\r\nexport const WEATHER_API_KEY = \"c9a431cab5f6d1b3755e1b90eff96b03\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Instalado Bootstrap, importarlo\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}